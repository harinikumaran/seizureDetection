function liveDemo(data, fs, curveData_matrix, curveData_bestFeature)
% data should be of the folowing format:
% col 1 is filtered nonseizure data
% col 2 is filtered seizure data
% col 3 is lineLengh data
% col 4 is nonlinear energy data
% col 5 is alpha band data
% col 6 is beta band data
% col 7 is theta band data
% col 8 is weighted sum data
% data should be of size [lengthData 8]
%
% curveData_matrix and curveData_bestFeature should have 3 columns
% col 1 is threshold factors
% col 2 is sensitivity values
% col 3 is false alarm rates
%
% see generateDemoData script to see how data is generated


% delete figure if it exists
fig = findall(0,'Tag', 'Demo');

if ~isempty(fig)
    close(fig)
end

if nargin == 0
    try
        load('demoData.mat')
    catch
        error('No input arguments and no file ''demoData.mat'' in directory.')
    end % try
end

%% Create Figure
figure('Name', 'Live Demo', ...
    'Visible', 'off', ...
    'Tag', 'Demo', ...
    'NumberTitle', 'off', ...
    'Resize', 'on', ...
    'IntegerHandle', 'off', ...
    'Units', 'normalized', ...
    'Position', [0.1 0.1 0.8 0.8], ...
    'MenuBar', 'none', ...
    'CreateFcn', {@fig_CreateFcn, data, fs, curveData_matrix, curveData_bestFeature});

%% Initialization Function
function fig_CreateFcn(fig, ~, data, fs, curveData_matrix, curveData_bestFeature)

%% Title
uicontrol(fig, ...
    'Style', 'text', ...
    'String', 'Live Demo', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'HorizontalAlignment', 'center', ...
    'ForegroundColor', 'k', ...     'BackgroundColor', [1 0.8431 0], ...
    'Position', [0.8 0.9 0.2 0.08]);

%% Axis
axes('Parent', fig, ...
    'Units', 'normalized', ...
    'Tag', 'ax_filteredData', ...
    'Position', [0.08 0.76 0.7 0.21])

axes('Parent', fig, ...
    'Units', 'normalized', ...
    'Tag', 'ax_feature', ...
    'Position', [0.08 0.54 0.7 0.21])

axes('Parent', fig, ...
    'Units', 'normalized', ...
    'Tag', 'ax_bits', ...
    'Position', [0.08 0.32 0.7 0.21])

axes('Parent', fig, ...
    'Units', 'normalized', ...
    'Tag', 'ax_weighted', ...
    'Position', [0.08 0.1 0.7 0.21])

axes('Parent', fig, ...
    'Units', 'normalized', ...
    'Tag', 'ax_curves', ...
    'Visible', 'off', ...
    'Position', [0.08 0.4 0.7 0.57])
%% Controls

% create uipanel
uipanel_Controls = uipanel(fig, ...
    'Title', 'Controls', ...
    'Tag', 'uipanel_Controls', ...
    'FontSize', 16, ...
    'Units', 'normalized', ...
    'BorderType' , 'etchedout', ...
    'BorderWidth', 1, ...
    'Position', [0.82 0.6 0.15 0.3]);

% Start
uicontrol(uipanel_Controls, ...
    'Style', 'pushbutton', ...
    'Tag', 'pushbutton_start', ...
    'String', 'Start', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'FontSize', 0.5, ...
    'Position', [0.1 0.7 0.8 0.1], ...
    'Callback', @start);

% Stop
uicontrol(uipanel_Controls, ...
    'Style', 'pushbutton', ...
    'Tag', 'pushbutton_stop', ...
    'String', 'Stop', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'FontSize', 0.5, ...
    'Position', [0.1 0.85 0.8 0.1], ...
    'Callback', @stop);

% Slider feature threshold
uicontrol(uipanel_Controls, ...
    'Style', 'slider', ...
    'Tag', 'slider_threshold', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'Max', 1, ...
    'Min', 0, ...
    'Value', 0.5, ...
    'SliderStep', [0.01 0.05], ...
    'FontSize', 0.7, ...
    'Position', [0.1 0.45 0.6 0.1], ...
    'Callback', @updateSliderValue);

uicontrol(uipanel_Controls, ...
    'Style', 'text', ...
    'String', 'Feature Threshold:', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'k', ...
    'Position', [0.1 0.55 0.8 0.1]);

uicontrol(uipanel_Controls, ...
    'Style', 'text', ...
    'String', '0.50', ...
    'Tag', 'text_thresholdValue', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'HorizontalAlignment', 'right', ...
    'ForegroundColor', 'k', ...
    'Position', [0.7 0.47 0.2 0.1]);

% Slider feature threshold
uicontrol(uipanel_Controls, ...
    'Style', 'slider', ...
    'Tag', 'slider_threshold_sum', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'Max', 1, ...
    'Min', 0, ...
    'Value', 0.5, ...
    'SliderStep', [0.01 0.05], ...
    'FontSize', 0.7, ...
    'Position', [0.1 0.25 0.6 0.1], ...
    'Callback', @updateSliderValue);

uicontrol(uipanel_Controls, ...
    'Style', 'text', ...
    'String', 'Sum Threshold:', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'HorizontalAlignment', 'left', ...
    'ForegroundColor', 'k', ...
    'Position', [0.1 0.35 0.8 0.1]);

uicontrol(uipanel_Controls, ...
    'Style', 'text', ...
    'String', '0.50', ...
    'Tag', 'text_thresholdValue_sum', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'HorizontalAlignment', 'right', ...
    'ForegroundColor', 'k', ...
    'Position', [0.7 0.27 0.2 0.1]);

% Checkbox
uicontrol(uipanel_Controls, ...
    'Style', 'checkbox', ...
    'String', 'Show curve', ...
    'Tag', 'checkbox_show', ...
    'Units', 'normalized', ...
    'FontUnits', 'normalized', ...
    'FontSize', 0.45, ...
    'Callback', @showCurve, ...
    'Position', [0.1 0.1 0.8 0.15]);

%% Radio buttons

featureSelection = uibuttongroup(fig, ...
    'Tag', 'featureSelection', ...
    'Title', 'Feature Selection', ...
    'FontSize', 16, ...
    'Units', 'normalized', ...
    'SelectionChangeFcn', @changeFeature, ...
    'Position',[0.82 0.4 0.15 0.2]);

% Create three radio buttons in the button group.
radio_lineLength = uicontrol(featureSelection, ...
    'Style','radiobutton',...
    'Units', 'normalized', ...
    'String','Line Length',...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'Position',[0.1 0.82 0.8 0.15]);

radio_nonlinearEnergy = uicontrol(featureSelection, ...
    'Style','radiobutton',...
    'Units', 'normalized', ...
    'String','Nonlinear Energy',...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'Position',[0.1 0.62 0.8 0.15]);

radio_alphaBand = uicontrol(featureSelection, ...
    'Style','radiobutton',...
    'Units', 'normalized', ...
    'String','Alpha Band Power',...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'Position',[0.1 0.42 0.8 0.15]);

radio_betaBand = uicontrol(featureSelection, ...
    'Style','radiobutton',...
    'Units', 'normalized', ...
    'String','Beta Band Power',...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'Position',[0.1 0.22 0.8 0.15]);

radio_thetaBand = uicontrol(featureSelection, ...
    'Style','radiobutton',...
    'Units', 'normalized', ...
    'String','Theta Band Power',...
    'FontUnits', 'normalized', ...
    'FontSize', 0.65, ...
    'Position',[0.1 0.02 0.8 0.15]);

%% Create handles struct
handles = guihandles;

%% Initialize Stuff
lengthData = size(data, 1);

hold(handles.ax_filteredData, 'on')
handles.line_filtered = plot(handles.ax_filteredData,0, 0, 'k', 'LineWidth', 1.5);
handles.line_filtered_seizure = plot(handles.ax_filteredData, 0, 0, 'r', 'LineWidth', 1.5);
hold(handles.ax_filteredData, 'on')
handles.line_feature = plot(handles.ax_feature, 0, 0, 'k', 'LineWidth', 1.5);
hold(handles.ax_feature, 'on')
handles.line_threshold = plot(handles.ax_feature, [0 lengthData], [0.5 0.5], 'r', 'LineWidth', 1.5);
hold(handles.ax_feature, 'off')
handles.line_bits = stairs(handles.ax_bits, 0, 0, 'k', 'LineWidth', 1.5);
handles.line_weighted = plot(handles.ax_weighted, 0, 0, 'k', 'LineWidth', 1.5);
hold(handles.ax_weighted, 'on')
handles.line_threshold_sum = plot(handles.ax_weighted, [0 lengthData], [0.5 0.5], 'r', 'LineWidth', 1.5);
hold(handles.ax_weighted, 'off')

handles.ax_feature.XTickLabel = [];
handles.ax_filteredData.XTickLabel = [];
handles.ax_bits.XTickLabel = [];

xlim = [0 (lengthData-1)/fs];
handles.ax_feature.XLim = xlim;
handles.ax_filteredData.XLim = xlim;
handles.ax_bits.XLim = xlim;
handles.ax_weighted.XLim = xlim;

handles.ax_filteredData.YLim = [min(data(:, 1)) max(data(:, 1))];
handles.ax_feature.YLim = [0 1];
handles.ax_bits.YLim = [-0.1 1.1];
handles.ax_weighted.YLim = [0 1];

ylabel(handles.ax_filteredData, 'Filtered iEEG Data')
ylabel(handles.ax_feature, 'Feature')
ylabel(handles.ax_bits, 'Logical Values')
xlabel(handles.ax_weighted, 'Time [seconds]')
ylabel(handles.ax_weighted, 'Weighted Sum')

handles.ax_weighted.FontUnits = 'normalized';
handles.ax_weighted.FontSize = 0.1;
handles.ax_bits.FontUnits = 'normalized';
handles.ax_bits.FontSize = 0.1;
handles.ax_filteredData.FontUnits = 'normalized';
handles.ax_filteredData.FontSize = 0.1;
handles.ax_feature.FontUnits = 'normalized';
handles.ax_feature.FontSize = 0.1;

% characteristic curve
hold(handles.ax_curves, 'on') % hold axes

% plot best feature
handles.line_curve_bestFeature = plot(handles.ax_curves, ...
    curveData_matrix(:, 3), curveData_matrix(:, 2), ...
    'r', 'LineWidth', 1.5, 'Visible', 'off');

% plot matrix detection
handles.line_curve_matrix = plot(handles.ax_curves, ...
    curveData_bestFeature(:, 3), curveData_bestFeature(:, 2), ...
    'k', 'LineWidth', 1.5, 'Visible', 'off');

% find point associated with current threshold and plot it as a marker
[~, markerIndex] = min(abs(curveData_matrix(:, 1) - handles.slider_threshold_sum.Value));
handles.line_curve_marker = plot(handles.ax_curves, ...
    curveData_matrix(markerIndex, 3), curveData_matrix(markerIndex, 2), ...
    'rx', 'MarkerSize', 18, 'LineWidth', 1.5, 'Visible', 'off');

% label axes
xlabel(handles.ax_curves, 'False Alarm Rate [false alarms/hour]');
ylabel(handles.ax_curves, 'Sensitivity');
handles.ax_curves.FontUnits = 'normalized';
handles.ax_curves.FontSize = 0.05;
hold(handles.ax_curves, 'off')
handles.ax_curves.XLim = [0 1]; % set axes limit
grid(handles.ax_curves, 'on')
handles.legend_curves = legend(handles.ax_curves, ...
    'Weighted Matrix', 'Best Feature', 'Current Point', ...
    'location', 'southeast');
handles.legend_curves.Visible = 'off';

handles.data = data;
handles.curveData_matrix = curveData_matrix;
handles.curveData_bestFeature = curveData_bestFeature;
handles.fs = fs;
handles.stepSize = 20; % draw that many samples at once
handles.i = 1;
handles.featureIndex = 3; % start with line length by default
%% save handles struct
fig.Visible = 'on';
guidata(fig, handles);

function start(hObject, ~)

% Get handles struct
handles = guidata(hObject);
handles.bitStop = false;
guidata(hObject, handles); % update handles struct
data = handles.data;
fs = handles.fs;
lengthData = size(data, 1);
stepSize = handles.stepSize;
i = handles.i;

while true
    
    i = mod(i + stepSize, lengthData);
    
    % get feature index
    featureIndex = handles.featureIndex;
    
    % get threshold
    threshold = handles.slider_threshold.Value;
    
    % refresh plots
    set(handles.line_filtered, 'XData', (0:i-1)/fs, 'YData', data(1:i, 1))
    set(handles.line_filtered_seizure, 'XData', (0:i-1)/fs, 'YData', data(1:i, 2))
    set(handles.line_feature, 'XData', (0:i-1)/fs, 'YData', data(1:i, featureIndex))
    
    bits = data(1:i, featureIndex) > threshold;
    set(handles.line_bits, 'XData', (0:i-1)/fs, 'YData', double(bits))
    set(handles.line_weighted, 'XData', (0:i-1)/fs, 'YData', data(1:i, 8))
    drawnow
    
    handles = guidata(hObject);
    if handles.bitStop
        break
    end % if
    handles.i = i;
    guidata(hObject, handles);
    pause(0.02)
end % for

function changeFeature(hObject, ~)
% Get handles struct
handles = guidata(hObject);
i = handles.i;
data = handles.data;
fs = handles.fs;

% get feature index
featureName = handles.featureSelection.SelectedObject.String;
switch featureName
    case 'Line Length'
        featureIndex = 3;
    case 'Nonlinear Energy'
        featureIndex = 4;
    case 'Alpha Band Power'
        featureIndex = 5;
    case 'Beta Band Power'
        featureIndex = 6;
    case 'Theta Band Power'
        featureIndex = 7;
end % switch
handles.featureIndex = featureIndex;

% get threshold
threshold = handles.slider_threshold.Value;

% plot lines
set(handles.line_feature, 'XData', (0:i-1)/fs, 'YData', data(1:i, featureIndex))
bits = data(1:i, featureIndex) > threshold;
set(handles.line_bits, 'XData', (0:i-1)/fs, 'YData', double(bits))

guidata(hObject, handles); % update handles struct

function stop(hObject, ~)
% Get handles struct
handles = guidata(hObject);
handles.bitStop = true;
guidata(hObject, handles); % update handles struct

function updateSliderValue(hObject, ~)
% Get handles struct
handles = guidata(hObject);
i = handles.i;
data = handles.data;
fs = handles.fs;
curveData_matrix = handles.curveData_matrix;
featureIndex = handles.featureIndex;

threshold = handles.slider_threshold.Value;
threshold_sum = handles.slider_threshold_sum.Value;
handles.text_thresholdValue.String = num2str(threshold, '%.2f');
handles.text_thresholdValue_sum.String = num2str(threshold_sum, '%.2f');

set(handles.line_threshold, 'YData', [threshold threshold])
set(handles.line_threshold_sum, 'YData', [threshold_sum threshold_sum])
bits = data(1:i, featureIndex) > threshold;
set(handles.line_bits, 'XData', (0:i-1)/fs, 'YData', double(bits))

% refresh characteristic curve marker
[~, markerIndex] = min(abs(curveData_matrix(:, 1) - handles.slider_threshold_sum.Value));
set(handles.line_curve_marker, 'XData', curveData_matrix(markerIndex, 3), 'YData', curveData_matrix(markerIndex, 2))

drawnow; % update plot to reflect changes

guidata(hObject, handles); % update handles struct

function showCurve(hObject, ~)
% Get handles struct
handles = guidata(hObject);

% show characteristic curve
if handles.checkbox_show.Value
    handles.ax_feature.Visible = 'off';
    handles.ax_bits.Visible = 'off';
    handles.ax_filteredData.Visible = 'off';
    handles.line_feature.Visible = 'off';
    handles.line_filtered.Visible = 'off';
    handles.line_filtered_seizure.Visible = 'off';
    handles.line_bits.Visible = 'off';
    handles.line_threshold.Visible = 'off';
    
    handles.ax_curves.Visible = 'on';
    handles.line_curve_bestFeature.Visible = 'on';
    handles.line_curve_matrix.Visible = 'on';
    handles.line_curve_marker.Visible = 'on';
    handles.legend_curves.Visible = 'on';
else
    % hide characteristic curve
    handles.ax_feature.Visible = 'on';
    handles.ax_bits.Visible = 'on';
    handles.ax_filteredData.Visible = 'on';
    handles.line_feature.Visible = 'on';
    handles.line_filtered.Visible = 'on';
    handles.line_filtered_seizure.Visible = 'on';
    handles.line_bits.Visible = 'on';
    handles.line_threshold.Visible = 'on';
    
    handles.ax_curves.Visible = 'off';
    handles.line_curve_bestFeature.Visible = 'off';
    handles.line_curve_matrix.Visible = 'off';
    handles.line_curve_marker.Visible = 'off';
    handles.legend_curves.Visible = 'off';
end % if
